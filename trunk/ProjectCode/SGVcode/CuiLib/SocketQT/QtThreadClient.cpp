//#include "stdafx.h"
#include "QtThreadClient.hpp"
/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
QtThreadClient::QtThreadClient(qintptr p)
{
	this->write_ptr(p);
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
QtThreadClient::~QtThreadClient(void)
{
	qDebug() << "QtThreadClient is Release ! ";
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QtThreadClient::write_ptr(qintptr p)
{
	this->ptr_sd = p;
	m_socket = QSharedPointer<QtTcpClient>(new QtTcpClient());
	m_socket->moveToThread(this);
}

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QtThreadClient::run()
{
	
	
	qDebug() << "Client Thread Start";
	

	m_socket->setSocketDescriptor(ptr_sd);//客户端的初始化  
	
	if (m_socket->waitForConnected(MAX_MSECS)) {

		
		
		while (M_THREAD_RUN){

			QAbstractSocket::SocketState stat_t = m_socket->state();

			if ( stat_t== QAbstractSocket::SocketState::ClosingState) {
			
				m_socket->waitForDisconnected();
				break;
			
			}else if(stat_t == QAbstractSocket::SocketState::UnconnectedState){
				break;
			}else{
			
				QByteArray qba= m_socket->readAllMy();
					m_socket->WriteMy(qba);	
			
			}
			
				

		}

		m_socket->close();


	}else {
		qDebug() << "Connect Fail";
	}


	qDebug() << "Client Thread Exit";

}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/