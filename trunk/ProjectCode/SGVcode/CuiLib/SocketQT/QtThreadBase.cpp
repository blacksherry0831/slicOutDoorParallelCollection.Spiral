//#include "stdafx.h"
#include "QtThreadBase.hpp"
/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
QtThreadBase::QtThreadBase(QObject *parent):QThread(parent)
{
	this->M_THREAD_RUN = true;
	this->MAX_MSECS = 30000;
	
	QTime t;
	t = QTime::currentTime();
	qsrand(t.msec() + t.second() * 1000);

	this->IDENTIFY=qrand();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
QtThreadBase::~QtThreadBase(void)
{
	this->closeServer();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QtThreadBase::emit_status_message(const QString & _msg)
{
	qDebug() << _msg;
	emit status_message(_msg);
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QtThreadBase::Sleep(int _ms)
{
	do {

		QThread::msleep(100);
		_ms -= 100;
#if 0
std::cout << "#";
#endif // 0
	} while (_ms > 0);

	std::cout << std::endl;
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QtThreadBase::startServer()
{
	this->M_THREAD_RUN = true;
	this->start();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QtThreadBase::closeServer()
{
	this->M_THREAD_RUN = false;

#if 0
	while (this->isRunning())
	{
		QThread::sleep(1);
		std::cout <<"wait for thread done";
	}
#endif // 0


}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QtThreadBase::run()
{
	while (M_THREAD_RUN)
	{

	}
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/