//#include "stdafx.h"
#include "exCircleData.hpp"
/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/
exCircleData::exCircleData(int _ch)
{
	this->init();
	this->Channel = _ch;
}

/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/
exCircleData::~exCircleData()
{
	this->clear();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void exCircleData::init()
{
	this->clear();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void exCircleData::destory()
{
	this->clear();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void exCircleData::clear()
{
	mAverage = Q_NULLPTR;
	mSigma = Q_NULLPTR;
	STATUS = CIRCLE_STATUS::INVALID;
	mImageFrame.clear();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
QSharedPointer<CMD_CTRL>  exCircleData::getImg()
{
	QSharedPointer<CMD_CTRL> cmd_ctrl;
	

	mutex.lock();

	if (mImageFrame.isEmpty()) {
		cmd_ctrl.clear();
	}else{
		cmd_ctrl = mImageFrame.dequeue();
	}



	mutex.unlock();

	return cmd_ctrl;
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void exCircleData::setImg(QSharedPointer<CMD_CTRL> cmd_ctrl)
{
	mutex.lock();
		mImageFrame.enqueue(cmd_ctrl);
		STATUS = CIRCLE_STATUS::VALID;
	mutex.unlock();	
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
int exCircleData::IsValid()
{
	return (STATUS== CIRCLE_STATUS::VALID)&&(mImageFrame.size()>0);
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/

/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/